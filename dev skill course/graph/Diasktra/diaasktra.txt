#include <bits/stdc++.h>
#define LIM 1003
#define INF 1000000009

using namespace std;

struct node {
    int v, w;
};

bool operator < (const node &u, const node &v) {
    return u.w > v.w;
}

int n,m;
vector<int> G[LIM], W[LIM];
int dis[LIM];

int dij(int root) {
    for(int i=1; i<=n; i++) dis[i] = INF;
    dis[root] = 0;
    priority_queue<node> pq;
    pq.push({root, 0});

    while(!pq.empty()) {
        node U = pq.top();
        pq.pop();

        int u = U.v;
        int w = U.w;

//        cout << "out " << u << ' ' << w << endl;
//        getchar();

        if(dis[u] < w) continue;

        for(int i=0; i<G[u].size(); i++) {
            int v = G[u][i];
            int w = W[u][i];
            if(dis[u]+w < dis[v]) {
                dis[v] = dis[u]+w;
                pq.push({v, dis[v]});
//                cout << "in " << v << " " << dis[v] << endl;
//                getchar();
            }
        }
    }

    return dis[n];
}

int main() {
    int T;
    scanf("%d", &T);
    for(int t=1; t<=T; t++) {
        scanf("%d %d", &n, &m);
        memset(G, NULL, sizeof G);
        memset(W, NULL, sizeof W);

        for(int i=0; i<m; i++) {
            int u,v,w;
            scanf("%d %d %d", &u, &v, &w);
            G[u].push_back(v); W[u].push_back(w);
            G[v].push_back(u); W[v].push_back(w);
        }
        int ans = dij(1);
        if(ans == INF) printf("Case %d: Impossible\n", t);
        else printf("Case %d: %d\n", t, ans);
    }
}