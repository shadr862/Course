#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define pb push_back
//#define mp make_pair
const ll INF=1e18;
const double pii = acos(-1);
const int mod = 1e9+7;
const int N = (ll) 1e6;

ll lcm(ll a,ll b)
{
    return (a/__gcd(a,b))*b;
}
vector<ll> adj[N];
ll color[N],parent[N];
//cycle detection
bool DFSPre(ll source,ll p)
{

    color[source]=1;
    parent[source]=p;
    for(ll i=0;i<adj[source].size();i++)
    {
        ll k=adj[source][i];
        if(k==parent[source])continue;
        if(color[k]==1)
        {
            cout<<source<<" "<<k<<endl;
            return true;
        }
        if(DFSPre(k,source)) return true;
    }
    return false;

}
inline void add(ll a,ll b)
{
    adj[a].pb(b);
    adj[b].pb(a);
}


inline void solve()
{

      ll n,m;
      cin>>n>>m;

     for(ll i=0;i<m;i++)
     {
         ll x,y;
         cin>>x>>y;
         add(x,y);
     }


     for(ll i=1;i<=n;i++)
     {
         if(!color[i])
         {
             if(DFSPre(i,0))
             {
                 cout<<"Cycle detected"<<endl;
                 return ;
             }
         }
     }

     cout<<"Cycle not  detected"<<endl;





}
int main()
{
    ll t;
    cin>>t;
    while(t--)
    {

        solve();

    }

	return 0;
}


/*
1
15 15
1 2
1 3
1 4
4 5
4 6
5 8
5 7
7 8
8 9
1 10
10 11
11 12
11 13
1 14
14 15





*/

