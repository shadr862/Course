#include <bits/stdc++.h>
#define LIM 1003
using namespace std;

int dr[] = {-1, +1, 0, 0};
int dc[] = {0, 0, -1, +1};

int n,m;
char grid[LIM][LIM];
int vis1[LIM][LIM], vis2[LIM][LIM];

bool valid(int r, int c) {
    return r >= 0 && r < n && c >= 0 && c < m;
}

bool verify(int ur, int uc) {
    vis1[ur][uc] = 1;
    bool ret = false;
    for(int i=0; i<4; i++) {
        int vr = ur+dr[i];
        int vc = uc+dc[i];
        if(!valid(vr,vc)) {
            ret = true;
            continue;
        }
        if(grid[vr][vc] != '#' && !vis1[vr][vc]) {
            ret |= verify(vr,vc);
        }
    }
    return ret;
}

int floodfill(int ur, int uc) {
    vis2[ur][uc] = 1;
    grid[ur][uc] = 'R';
    int cnt = 1;
    for(int i=0; i<4; i++) {
        int vr = ur+dr[i];
        int vc = uc+dc[i];
        if(valid(vr,vc) && grid[vr][vc] != '#') {
            if(!vis2[vr][vc]) {
                cnt += floodfill(vr,vc);
            }
        }
    }
    return cnt;
}

int main() {
    scanf("%d %d", &n, &m);
    for(int i=0; i<n; i++) {
        scanf("%s", grid[i]);
    }


    memset(vis1, 0, sizeof vis1);
    memset(vis2, 0, sizeof vis2);
    for(int i=0; i<n; i++) {
        for(int j=0; j<m; j++) {
            if(grid[i][j] != '#' && !vis1[i][j]) {
                if(!verify(i,j)) {
                    floodfill(i,j);
                }
            }
        }
    }

    cout << endl;
    for(int i=0; i<n; i++) printf("%s\n", grid[i]);

}

/*
10 10
..........
##......#.
#.##...#.#
#...#.##.#
#####.#..#
......#..#
##...#...#
#.##..#..#
#...#..#.#
#####...#.
*/