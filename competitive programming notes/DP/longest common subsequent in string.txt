#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp>
#include <functional> // for less
#include <bits/stdc++.h>
using namespace __gnu_pbds;
using namespace std;
typedef tree<int, null_type, less<int>, rb_tree_tag,
             tree_order_statistics_node_update>
    pbds;
#define p pair<int,int>
typedef long long ll;
const ll INF=1e18;


int longestsubsecquent(string& s1,string& s2)
{
    int i,j,result=-1;
    int dp[s1.size()][s2.size()];
    for(i=0;i<s1.size();i++)
    {
        for(j=0;j<s2.size();j++)
        {
            if(i==0||j==0)
            {
                dp[i][j]=0;
            }
            else if(s1[i]==s2[j])
            {
                dp[i][j]=dp[i-1][j-1]+1;
                result=max(result,dp[i][j]);
            }
            else{
                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
    }

    return result;


}
int main()
{


    int n,r;
    string s2,s1;
    cin>>s1>>s2;




    r=longestsubsecquent(s1,s2);
    cout<<r<<endl;







    }