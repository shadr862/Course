#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp>
#include <functional> // for less
#include <bits/stdc++.h>
using namespace __gnu_pbds;
using namespace std;
typedef tree<int, null_type, less<int>, rb_tree_tag,
             tree_order_statistics_node_update>
    pbds;
#define p pair<int,int>
typedef long long ll;
const ll INF=1e18;
int lis[100];
void inatializer(int n)
{
    for(int i=0;i<=n;i++)
    {
        lis[i]=1;
    }
}
int longestsubsecquent(int arr[],int n)
{
    int i,j,mx=-1;
    for(i=1;i<n;i++)
    {
        for(j=0;j<i;j++)
        {
            if(arr[i]>arr[j]&&lis[i]<=lis[j])
            {
                lis[i]=lis[j]+1;
            }
        }
    }
    for(i=0;i<n;i++)
    {
        if(mx<lis[i])
        {
            mx=lis[i];
        }

    }
    return mx;


}
int main()
{


    int n,r;
    cin>>n;
    inatializer(n);
    int arr[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }

    r=longestsubsecquent(arr,n);
    for(int i=n-1;i>=0;i--)
    {
        if(lis[i]==r)
        {
            cout<<arr[i]<<" ";
            r--;

        }
    }







    }
