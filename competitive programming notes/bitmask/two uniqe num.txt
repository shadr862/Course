https://www.geeksforgeeks.org/find-two-non-repeating-elements-in-an-array-of-repeating-elements/
#include <bits/stdc++.h>
using namespace std;

#define ll long long int
#define pb push_back
#define mp make_pair
const ll INF=1e18;
const double pii = acos(-1);
const int mod = 1000000007;
const int N = (int) 1e5;

ll lcm(ll a,ll b)
{
    return (a/__gcd(a,b))*b;
}

int fo[N], fe[N];

void solve()
{   int n;
    cin >> n;
    int *arr = new int[n];
    int res = 0;
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
        res ^= arr[i];
    }

    int tempRes = res, index = 0;
    // Check the first bit which is set(1)
    while (tempRes > 0)
    {
        if (tempRes & 1)
            break;
        index++;
        tempRes = tempRes >> 1;
    }

    int mask = (1 << index);
    //ind 3 2 1 0
    //mask 8 4 2 1
    //mask is num which ind num only set bit but rest of bit 0
    //num  10100
    //mask 00100

    vector<int> tempArr;
    for (int i = 0; i < n; i++)
    {
        if (arr[i] & mask)
            tempArr.push_back(arr[i]);
    }
    int a = 0;
    for (vector<int>::iterator it = tempArr.begin(); it != tempArr.end(); it++)
        a ^= (*it);
        //1 001
        //7 111
        //1^7
        //6 110=res
        //ind=1;
        //mask=2;
        //a=7
        //b=7^6=1
    int b = res ^ a;
    if (a > b)
        cout << b << " " << a << '\n';
    else
        cout << a << " " << b << '\n';
}
int main()
{
    ll t;
    //cin>>t;
    //while(t--)
    {
        solve();

    }

	return 0;
}

