#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp>
#include <functional> // for less
#include <bits/stdc++.h>
using namespace __gnu_pbds;
using namespace std;
typedef tree<int, null_type, less<int>, rb_tree_tag,
             tree_order_statistics_node_update>
    pbds;
#define p pair<int,int>
typedef long long ll;
const ll INF=1e18;
int main()
{


    ll n,t,sm,la,i,v;
    cin>>t;

    while (t--) {
        cin>>n;
        set<ll> s;
        pbds policy;
        cin>>v;
        s.insert(v);
        policy.insert(v);
        la=INF;
        sm=-INF;
        bool f=true;
        for(i=1;i<n;i++)
        {
            cin>>v;
            ll csize=policy.size();
            ll cmedian=*policy.find_by_order(csize/2);
            if(v<cmedian)
            {
                if(s.count(v))
                {
                     policy.insert(la--);
                     policy.insert(la--);

                }
                else
                {
                    policy.insert(la--);
                    policy.insert(v);
                    s.insert(v);

                }
            }
            else if(v>cmedian)
            {
                if(s.count(v))
                {
                     policy.insert(sm++);
                     policy.insert(sm++);

                }
                else
                {
                    policy.insert(sm++);
                    policy.insert(v);
                    s.insert(v);

                }
            }
            else
            {
                 policy.insert(sm++);
                 policy.insert(la--);
            }
            ll new_size=policy.size();
            ll new_median=*policy.find_by_order(new_size/2);
            if(v!=new_median)
            {
                f=false;
            }

        }
        if(f)
        {
            cout<<"YES"<<endl;
        }
        else
        {
            cout<<"NO"<<endl;
        }









        }




    }