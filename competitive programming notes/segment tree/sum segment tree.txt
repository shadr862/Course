#include <bits/stdc++.h>
using namespace std;
#define ln "\n"
#define ll long long
#define pb push_back
#define mp make_pair
#define mem(x, n) memset(x, n, sizeof(x))
#define all(x) x.begin(), x.end()

const ll INF=1e18;
const double pii = acos(-1);
const ll mod = 1e9+7;
const ll N = 1000;

ll vis[N];
vector<ll> adj[N];
ll p[N];
ll lcm(ll a,ll b)
{
    return (a/__gcd(a,b))*b;
}
void prime()
{
    mem(p,1);
    for(ll i=2;i*i<=N;i++)
    {
        if(p[i])
        {
            for(ll j=i*i;j<=N;j=j+i)
            {
                p[j]=0;
            }

        }

    }
}

#define mx 100001
int arr[mx];
int tree[mx * 3];
void build(ll node,ll b,ll e)
{
    if(b==e)
    {
        tree[node]=arr[b];
        return ;
    }
    ll left=node*2;
    ll right=node*2+1;
    ll mid=(b+e)/2;
    build(left,b,mid);
    build(right,mid+1,e);
    tree[node]=tree[left]+tree[right];
}
// 4 -9 3 7 1 0 2

int query(int node, int b, int e, int i, int j)
{
    if(i>e||j<b)
    {
        return 0;
    }

    if(b>=i && e<=j)
    {
        return tree[node];
    }
    ll left=node*2;
    ll right=node*2+1;
    ll mid=(b+e)/2;
    ll p1=query(left,b,mid,i,j);
    ll p2=query(right,mid+1,e,i,j);

    return p1+p2;
}

void update(int node, int b, int e, int i,int newvalue)
{
    if(i>e||i<b)
    {
        return ;
    }
    if(b>=i && e<=i)
    {
        tree[node]=newvalue;
        return ;
    }
    ll left=node*2;
    ll right=node*2+1;
    ll mid=(b+e)/2;
    update(left,b,mid,i,newvalue);
    update(right,mid+1,e,i,newvalue);
    tree[node]=tree[left]+tree[right];
}

void solve()
{
    ll n;
    cin>>n;
    for(ll i=1;i<=n;i++)
    {
        cin>>arr[i];
    }
    build(1,1,n);


    update(1, 1, n, 2, 0);
    cout << query(1, 1, n, 1, 3) << endl;
    update(1, 1, n, 2, 2);
    cout << query(1, 1, n, 2, 2) << endl;




}
int main()
{
	int t;
    //cin>>t;
	//while(t--)
	{

		solve();
	}
	return 0;
}
