#ifndef DYNARR_H_INCLUDED
#define DYNARR_H_INCLUDED
class dynArr{
private:
    int* arr;
    int size;
public :
    dynArr();
    dynArr(int);
    ~dynArr();
    void setValue(int,int);
    int getValue(int);
    void allocate(int);

};
#endif

#include "dynarr.h"
#include<iostream>
using namespace std;

dynArr::dynArr()
{
   arr=NULL;
   size=0;

}

dynArr::dynArr(int n)
{

    arr=new int[n];
    size=n;
}

dynArr::~dynArr()
{

    delete[] arr;
}
void dynArr :: setValue(int ind,int value)
{
     arr[ind]=value;

}

int  dynArr :: getValue(int ind)
{

    return arr[ind];
}

void dynArr :: allocate(int s)
{
    delete[] arr;
    arr=new int[s];
}

#include <iostream>
using namespace std;
#include "dynarr.h"

int main()
{
    dynArr d1();
    dynArr d2(5);
    for(int i=0;i<5;i++)
    {
        int n;
        cin>>n;
        d2.setValue(i,n);
    }
    for(int i=0;i<5;i++)
    {
        cout<<d2.getValue(i)<<" ";
    }
    return 0;
}