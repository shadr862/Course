#ifndef DYNARR_H_INCLUDED
#define DYNARR_H_INCLUDED
class dynArr1{
private:
    int** arr;
    int size;
public:
    dynArr1();
    dynArr1(int,int);
    ~dynArr1();
    void setValue(int,int,int);
    int getValue(int,int);
    void allocate(int,int);



};
#endif // DYNARR_H_INCLUDED

#include "dynarr1.h"
#include<iostream>
using namespace std;

dynArr1::dynArr1()
{
    arr=NULL;
    size=0;
}

dynArr1::dynArr1(int row,int col)
{
    arr=new int*[row];
    for(int i=0;i<row;i++)
    {
        arr[i]=new int[col];
    }
    size=row;

}


dynArr1::~dynArr1()
{
    for(int i=0;i<size;i++)
    {
        delete[] arr[i];
    }
    delete[] arr;
}


void dynArr1::setValue(int row,int col,int value)
{
    arr[row][col]=value;
}


int dynArr1::getValue(int row,int col)
{
     return arr[row][col];
}


void dynArr1::allocate(int row,int col)
{
    for(int i=0;i<row;i++)
    {
        delete[] arr[i];
    }
    
    delete[] arr;
    arr=new int*[row];
    
    for(int i=0;i<row;i++)
    {
        arr[i]=new int[col];
    }

}

#include <iostream>
using namespace std;

#include "dynarr1.h"
int main()
{

    int row,col;
    cin>>row>>col;
    dynArr1 ar1();
    dynArr1 ar(row,col);
    for(int i=0;i<row;i++)
    {
        for(int j=0;j<col;j++)
        {
            int n1;
            cin>>n1;
            ar.setValue(i,j,n1);
        }
    }
    for(int i=0;i<row;i++)
    {
        for(int j=0;j<col;j++)
        {

            cout<<ar.getValue(i,j)<<" ";
        }
        cout<<endl;
    }
    return 0;
}